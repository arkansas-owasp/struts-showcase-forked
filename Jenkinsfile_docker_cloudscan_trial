pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                // only need git url if script isn't under SCM
                // git url: 'https://github.com/gmdavef/struts-showcase', branch: 'main'
                withMaven( maven: 'mvn3' ) {
                    sh 'mvn clean package'
                }
            }
        }
        stage('RL-Scan') {
            environment {
                RLTOK = credentials('rlApiToken_trial')
            }            
            steps {
                script {
                    sh '''
                    echo $WORKSPACE
                    mkdir -p "$WORKSPACE/RLreport/$BUILD_NUMBER"
                    PREV_BUILD_NUM=`expr $BUILD_NUMBER - 1`
                    docker run --rm -u \$(id -u):\$(id -g) \
                    -e RLPORTAL_ACCESS_TOKEN=$RLTOK \
                    -v "$WORKSPACE/target:/packages:ro" \
                    -v "$WORKSPACE/RLreport/$BUILD_NUMBER:/report" \
                    reversinglabs/rl-scanner-cloud rl-scan \
                    --rl-portal-server=trial --rl-portal-org=Trial --rl-portal-group=ProdMgmt \
                    --purl=Apache/Struts2showcase@2.5.28-$BUILD_NUMBER \
                    --file-path=/packages/struts2-showcase.war \
                    --report-path=/report --report-format=rl-summary-pdf,rl-json,cyclonedx \
                    --diff-with=2.5.28-$PREV_BUILD_NUM
                  # Use if we don't want to wait for the scan to finish and don't need reports saved as build artifacts.
                  #  --submit-only
                    ''' 
                }
            }
        }
    }
    post {
        always {
            sh 'mkdir -p RLreport/latest && cp RLreport/$BUILD_NUMBER/*.* RLreport/latest'
            archiveArtifacts artifacts: 'RLreport/latest/*.*', onlyIfSuccessful: false
        }
    }  
}
